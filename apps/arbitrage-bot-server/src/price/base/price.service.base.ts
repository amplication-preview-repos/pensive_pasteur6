/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Price as PrismaPrice,
  Cryptocurrency as PrismaCryptocurrency,
  Exchange as PrismaExchange,
} from "@prisma/client";

export class PriceServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.PriceCountArgs, "select">): Promise<number> {
    return this.prisma.price.count(args);
  }

  async prices<T extends Prisma.PriceFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PriceFindManyArgs>
  ): Promise<PrismaPrice[]> {
    return this.prisma.price.findMany<Prisma.PriceFindManyArgs>(args);
  }
  async price<T extends Prisma.PriceFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PriceFindUniqueArgs>
  ): Promise<PrismaPrice | null> {
    return this.prisma.price.findUnique(args);
  }
  async createPrice<T extends Prisma.PriceCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PriceCreateArgs>
  ): Promise<PrismaPrice> {
    return this.prisma.price.create<T>(args);
  }
  async updatePrice<T extends Prisma.PriceUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PriceUpdateArgs>
  ): Promise<PrismaPrice> {
    return this.prisma.price.update<T>(args);
  }
  async deletePrice<T extends Prisma.PriceDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PriceDeleteArgs>
  ): Promise<PrismaPrice> {
    return this.prisma.price.delete(args);
  }

  async getCryptocurrency(
    parentId: string
  ): Promise<PrismaCryptocurrency | null> {
    return this.prisma.price
      .findUnique({
        where: { id: parentId },
      })
      .cryptocurrency();
  }

  async getExchange(parentId: string): Promise<PrismaExchange | null> {
    return this.prisma.price
      .findUnique({
        where: { id: parentId },
      })
      .exchange();
  }
  async FetchPrices(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
