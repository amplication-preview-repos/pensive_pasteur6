/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ArbitrageOpportunity } from "./ArbitrageOpportunity";
import { ArbitrageOpportunityCountArgs } from "./ArbitrageOpportunityCountArgs";
import { ArbitrageOpportunityFindManyArgs } from "./ArbitrageOpportunityFindManyArgs";
import { ArbitrageOpportunityFindUniqueArgs } from "./ArbitrageOpportunityFindUniqueArgs";
import { CreateArbitrageOpportunityArgs } from "./CreateArbitrageOpportunityArgs";
import { UpdateArbitrageOpportunityArgs } from "./UpdateArbitrageOpportunityArgs";
import { DeleteArbitrageOpportunityArgs } from "./DeleteArbitrageOpportunityArgs";
import { ArbitrageOpportunityService } from "../arbitrageOpportunity.service";
@graphql.Resolver(() => ArbitrageOpportunity)
export class ArbitrageOpportunityResolverBase {
  constructor(protected readonly service: ArbitrageOpportunityService) {}

  async _arbitrageOpportunitiesMeta(
    @graphql.Args() args: ArbitrageOpportunityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ArbitrageOpportunity])
  async arbitrageOpportunities(
    @graphql.Args() args: ArbitrageOpportunityFindManyArgs
  ): Promise<ArbitrageOpportunity[]> {
    return this.service.arbitrageOpportunities(args);
  }

  @graphql.Query(() => ArbitrageOpportunity, { nullable: true })
  async arbitrageOpportunity(
    @graphql.Args() args: ArbitrageOpportunityFindUniqueArgs
  ): Promise<ArbitrageOpportunity | null> {
    const result = await this.service.arbitrageOpportunity(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ArbitrageOpportunity)
  async createArbitrageOpportunity(
    @graphql.Args() args: CreateArbitrageOpportunityArgs
  ): Promise<ArbitrageOpportunity> {
    return await this.service.createArbitrageOpportunity({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ArbitrageOpportunity)
  async updateArbitrageOpportunity(
    @graphql.Args() args: UpdateArbitrageOpportunityArgs
  ): Promise<ArbitrageOpportunity | null> {
    try {
      return await this.service.updateArbitrageOpportunity({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ArbitrageOpportunity)
  async deleteArbitrageOpportunity(
    @graphql.Args() args: DeleteArbitrageOpportunityArgs
  ): Promise<ArbitrageOpportunity | null> {
    try {
      return await this.service.deleteArbitrageOpportunity(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
