/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ArbitrageOpportunityService } from "../arbitrageOpportunity.service";
import { ArbitrageOpportunityCreateInput } from "./ArbitrageOpportunityCreateInput";
import { ArbitrageOpportunity } from "./ArbitrageOpportunity";
import { ArbitrageOpportunityFindManyArgs } from "./ArbitrageOpportunityFindManyArgs";
import { ArbitrageOpportunityWhereUniqueInput } from "./ArbitrageOpportunityWhereUniqueInput";
import { ArbitrageOpportunityUpdateInput } from "./ArbitrageOpportunityUpdateInput";

export class ArbitrageOpportunityControllerBase {
  constructor(protected readonly service: ArbitrageOpportunityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ArbitrageOpportunity })
  async createArbitrageOpportunity(
    @common.Body() data: ArbitrageOpportunityCreateInput
  ): Promise<ArbitrageOpportunity> {
    return await this.service.createArbitrageOpportunity({
      data: data,
      select: {
        buyExchange: true,
        createdAt: true,
        crypto: true,
        id: true,
        profit: true,
        sellExchange: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ArbitrageOpportunity] })
  @ApiNestedQuery(ArbitrageOpportunityFindManyArgs)
  async arbitrageOpportunities(
    @common.Req() request: Request
  ): Promise<ArbitrageOpportunity[]> {
    const args = plainToClass(ArbitrageOpportunityFindManyArgs, request.query);
    return this.service.arbitrageOpportunities({
      ...args,
      select: {
        buyExchange: true,
        createdAt: true,
        crypto: true,
        id: true,
        profit: true,
        sellExchange: true,
        timestamp: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ArbitrageOpportunity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async arbitrageOpportunity(
    @common.Param() params: ArbitrageOpportunityWhereUniqueInput
  ): Promise<ArbitrageOpportunity | null> {
    const result = await this.service.arbitrageOpportunity({
      where: params,
      select: {
        buyExchange: true,
        createdAt: true,
        crypto: true,
        id: true,
        profit: true,
        sellExchange: true,
        timestamp: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ArbitrageOpportunity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateArbitrageOpportunity(
    @common.Param() params: ArbitrageOpportunityWhereUniqueInput,
    @common.Body() data: ArbitrageOpportunityUpdateInput
  ): Promise<ArbitrageOpportunity | null> {
    try {
      return await this.service.updateArbitrageOpportunity({
        where: params,
        data: data,
        select: {
          buyExchange: true,
          createdAt: true,
          crypto: true,
          id: true,
          profit: true,
          sellExchange: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ArbitrageOpportunity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteArbitrageOpportunity(
    @common.Param() params: ArbitrageOpportunityWhereUniqueInput
  ): Promise<ArbitrageOpportunity | null> {
    try {
      return await this.service.deleteArbitrageOpportunity({
        where: params,
        select: {
          buyExchange: true,
          createdAt: true,
          crypto: true,
          id: true,
          profit: true,
          sellExchange: true,
          timestamp: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
