/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ArbitrageOpportunity as PrismaArbitrageOpportunity,
} from "@prisma/client";

export class ArbitrageOpportunityServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ArbitrageOpportunityCountArgs, "select">
  ): Promise<number> {
    return this.prisma.arbitrageOpportunity.count(args);
  }

  async arbitrageOpportunities<
    T extends Prisma.ArbitrageOpportunityFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ArbitrageOpportunityFindManyArgs>
  ): Promise<PrismaArbitrageOpportunity[]> {
    return this.prisma.arbitrageOpportunity.findMany<Prisma.ArbitrageOpportunityFindManyArgs>(
      args
    );
  }
  async arbitrageOpportunity<
    T extends Prisma.ArbitrageOpportunityFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ArbitrageOpportunityFindUniqueArgs>
  ): Promise<PrismaArbitrageOpportunity | null> {
    return this.prisma.arbitrageOpportunity.findUnique(args);
  }
  async createArbitrageOpportunity<
    T extends Prisma.ArbitrageOpportunityCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ArbitrageOpportunityCreateArgs>
  ): Promise<PrismaArbitrageOpportunity> {
    return this.prisma.arbitrageOpportunity.create<T>(args);
  }
  async updateArbitrageOpportunity<
    T extends Prisma.ArbitrageOpportunityUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ArbitrageOpportunityUpdateArgs>
  ): Promise<PrismaArbitrageOpportunity> {
    return this.prisma.arbitrageOpportunity.update<T>(args);
  }
  async deleteArbitrageOpportunity<
    T extends Prisma.ArbitrageOpportunityDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ArbitrageOpportunityDeleteArgs>
  ): Promise<PrismaArbitrageOpportunity> {
    return this.prisma.arbitrageOpportunity.delete(args);
  }
}
