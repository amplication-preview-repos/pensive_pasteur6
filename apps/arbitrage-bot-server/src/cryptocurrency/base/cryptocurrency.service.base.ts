/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Cryptocurrency as PrismaCryptocurrency,
  Price as PrismaPrice,
} from "@prisma/client";

export class CryptocurrencyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CryptocurrencyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.cryptocurrency.count(args);
  }

  async cryptocurrencies<T extends Prisma.CryptocurrencyFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CryptocurrencyFindManyArgs>
  ): Promise<PrismaCryptocurrency[]> {
    return this.prisma.cryptocurrency.findMany<Prisma.CryptocurrencyFindManyArgs>(
      args
    );
  }
  async cryptocurrency<T extends Prisma.CryptocurrencyFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CryptocurrencyFindUniqueArgs>
  ): Promise<PrismaCryptocurrency | null> {
    return this.prisma.cryptocurrency.findUnique(args);
  }
  async createCryptocurrency<T extends Prisma.CryptocurrencyCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CryptocurrencyCreateArgs>
  ): Promise<PrismaCryptocurrency> {
    return this.prisma.cryptocurrency.create<T>(args);
  }
  async updateCryptocurrency<T extends Prisma.CryptocurrencyUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CryptocurrencyUpdateArgs>
  ): Promise<PrismaCryptocurrency> {
    return this.prisma.cryptocurrency.update<T>(args);
  }
  async deleteCryptocurrency<T extends Prisma.CryptocurrencyDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CryptocurrencyDeleteArgs>
  ): Promise<PrismaCryptocurrency> {
    return this.prisma.cryptocurrency.delete(args);
  }

  async findPrices(
    parentId: string,
    args: Prisma.PriceFindManyArgs
  ): Promise<PrismaPrice[]> {
    return this.prisma.cryptocurrency
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .prices(args);
  }
}
